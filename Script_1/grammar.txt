//symbols
Goal stmt_list stmt 
var_def type_def func_def if_exp while_exp sg_stmt control_flow
var_assign calc_exp type_exp par_list if_stmt else_stmt bool_exp str_exp
add_exp cmp_exp mul_exp pri_exp apply_exp arg_list 
basic_type array_type idn_type func_type generic_type generic_exp 
class_def scope_info_e generic_info_e inherit_info_list_e class_member_def field_def method_def
scope_info generic_info inherit_info_list array_exp new_exp

//tokens
if else while return break continue int double bool true false string char number var str chr 
class interface extends implements public private static type new
|| && ! > >= < <= == != + - ++ -- * / += -= *= /= = ? ->
e ( ) { } [ ] , . ; eof 

//grammars
Goal |>
   stmt_list 

stmt_list |> 
   stmt_list stmt 
>| stmt 

stmt |> 
   var_def ;
>| type_def 
>| func_def
>| if_exp
>| while_exp
>| sg_stmt ;

sg_stmt |>
   var_assign
>| calc_exp
>| control_flow

control_flow |>
   return calc_exp
>| continue
>| break

var_def |>
   var_def , var
>| var_def , var = calc_exp
>| type_exp var
>| type_exp var = calc_exp

var_assign |>
   var = calc_exp
>| var += calc_exp
>| var -= calc_exp
>| var *= calc_exp
>| var /= calc_exp

type_exp |>
   basic_type
>| array_type
>| idn_type
>| generic_type 

basic_type |>
   int
>| double
>| bool
>| string
>| char

array_type |>
   array_type [ ]
>| basic_type [ ]
>| idn_type [ ]

idn_type |>
   idn_type . var
>| var

func_type |>
   func_type -> type_exp
>| ( func_type -> type_exp )
>| type_exp

generic_type |>
   idn_type generic_exp

generic_exp |>
   < var >
>| < ? inherit_info_list >

type_def |>
   type var = func_type ;
>| class_def 

class_def |>
   scope_info_e class var generic_info_e inherit_info_list_e { class_member_def }
   
scope_info_e |>
   scope_info
>| e

scope_info |>
   static
>| static public
>| static private
>| public
>| private

generic_info_e |>
   generic_info 
>| e

generic_info |>
   < var inherit_info_list_e >

inherit_info_list_e |>
   inherit_info_list
>| e

inherit_info_list |>
   inherit_info_list extends var
>| inherit_info_list implements var
>| extends var
>| implements var

class_member_def |>
   class_member_def field_def
>| class_member_def method_def
>| e
 
field_def |>
   var_def ;

method_def |>
   scope_info_e generic_info_e func_def

func_def |>
   type_exp var ( par_list ) { stmt_list }

par_list |>
   par_list , type_exp var
>| type_exp var
>| e

if_exp |>
   if_stmt 
>| if_stmt else else_stmt

if_stmt |>
   if ( bool_exp ) { stmt_list }
>| if ( bool_exp ) sg_stmt ;

else_stmt |>
   if_exp
>| { stmt_list }
>| sg_stmt ;

while_exp |>
   while ( bool_exp ) { stmt_list }

calc_exp |> 
   bool_exp 
>| new_exp

new_exp |>
   new type_exp ( arg_list )

bool_exp |> 
   bool_exp && cmp_exp 
>| bool_exp || cmp_exp 
>| ! cmp_exp 
>| cmp_exp 

cmp_exp |> 
   add_exp > add_exp 
>| add_exp >= add_exp 
>| add_exp < add_exp 
>| add_exp <= add_exp 
>| add_exp == add_exp 
>| add_exp != add_exp 
>| add_exp
>| true 
>| false 

add_exp |> 
   add_exp + mul_exp 
>| add_exp - mul_exp 
>| - mul_exp 
>| mul_exp 
>| ++ var 
>| -- var 
>| var ++ 
>| var -- 

mul_exp |> 
   mul_exp * pri_exp 
>| mul_exp / pri_exp 
>| pri_exp 

pri_exp |> 
   number 
>| ( bool_exp ) 
>| apply_exp 
>| str_exp 

str_exp |> 
   str 
>| chr 

apply_exp |> 
   apply_exp . var ( arg_list ) 
>| apply_exp . var 
>| var ( arg_list ) 
>| var 
>| array_exp

arg_list |> 
   arg_list , calc_exp 
>| calc_exp 
>| e 

array_exp |>
   array_exp [ number ]
>| idn_type [ number ]   

//end