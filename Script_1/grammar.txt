//symbols
Goal stmt_list stmt if_stmt while_stmt sg_stmt class_def func_def
var_def var_assign control_flow type_def calc_exp left_side FieldAccess ArrayAccess
type_exp basic_type array_type idn_type func_type generic_type generic_args
scope_info_list scope_info generic_pars_list generic_pars extends_list implements_list member_def_list
extends_types implements_types member_def field_def method_def



par_list if_stmt else_stmt bool_exp str_exp
add_exp cmp_exp mul_exp pri_exp apply_exp arg_list array_exp new_exp

//tokens
if else while return break continue int double bool true false string char number var str chr function
class interface extends implements public private static type new final finally try catch finalize 
|| && ! > >= < <= == != + - ++ -- * / += -= *= /= = ? ->
e ( ) { } [ ] , . ; eof 

//grammars
Goal |>
   stmt_list

stmt_list |>
   stmt_list stmt
>| stmt

stmt |> 
   class_def
>| func_def
>| if_stmt
>| while_stmt
>| sg_stmt ;

sg_stmt |>
   var_assign
>| var_def
>| calc_exp
>| control_flow
>| type_def

control_flow |>
   return calc_exp
>| continue
>| break

var_def |>
   var_def , var
>| var_def , var = calc_exp
>| type_exp var
>| type_exp var = calc_exp

var_assign |>
   left_side = calc_exp

left_side |>
   FieldAccess
>| ArrayAccess
>| var

type_exp |>
   basic_type
>| array_type
>| idn_type
>| generic_type

basic_type |>
   int
>| double
>| bool
>| string
>| char
>| function

array_type |>
   array_type [ ]
>| basic_type [ ]
>| idn_type [ ]

idn_type |>
   idn_type . var
>| var

generic_type |>
   idn_type < generic_args >

generic_args |>
   generic_args , var
>| generic_args , ? extends idn_type
>| var
>| ? extends idn_type

class_def |>
   scope_info_list class var generic_pars_list extends_list implements_list  { member_def_list }
   
scope_info_list |>
   scope_info_list scope_info
>| scope_info
>| e

scope_info |>
   static
>| public
>| private
>| final

generic_pars_list |>
   < generic_pars >
>| e

generic_pars |>
   generic_pars , var
>| generic_pars , var extends idn_type
>| var
>| var extends idn_type

extends_list |>
   extens_types
>| e

extens_types |>
   extens_types idn_type
>| extends idn_type

implements_list |>
   implements_types
>| e

implements_types |>
   implements_types idn_type
>| implements idn_type

member_def_list
   member_def
>| e

member_def |>
   member_def field_def
>| member_def method_def
 
field_def |>
   scope_info_list var_def ;

method_def |>
   scope_info_list generic_pars_list func_def

func_def |>
   type_exp var ( par_list ) { stmt_list }

par_list |>
   par_list , type_exp var
>| type_exp var
>| e

if_exp |>
   if_stmt 
>| if_stmt else else_stmt

if_stmt |>
   if ( bool_exp ) { stmt_list }
>| if ( bool_exp ) sg_stmt ;

else_stmt |>
   if_exp
>| { stmt_list }
>| sg_stmt ;

while_exp |>
   while ( bool_exp ) { stmt_list }

calc_exp |> 
   bool_exp 
>| new_exp

new_exp |>
   new type_exp ( arg_list )

bool_exp |> 
   bool_exp && cmp_exp 
>| bool_exp || cmp_exp 
>| ! cmp_exp 
>| cmp_exp 

cmp_exp |> 
   add_exp > add_exp 
>| add_exp >= add_exp 
>| add_exp < add_exp 
>| add_exp <= add_exp 
>| add_exp == add_exp 
>| add_exp != add_exp 
>| add_exp
>| true 
>| false 

add_exp |> 
   add_exp + mul_exp 
>| add_exp - mul_exp 
>| - mul_exp 
>| mul_exp 
>| ++ var 
>| -- var 
>| var ++ 
>| var -- 

mul_exp |> 
   mul_exp * pri_exp 
>| mul_exp / pri_exp 
>| pri_exp 

pri_exp |> 
   number 
>| ( bool_exp ) 
>| apply_exp 
>| str_exp 

str_exp |> 
   str 
>| chr 

apply_exp |> 
   apply_exp . var ( arg_list ) 
>| apply_exp . var 
>| var ( arg_list ) 
>| var 
>| array_exp

arg_list |> 
   arg_list , calc_exp 
>| calc_exp 
>| e 

array_exp |>
   array_exp [ number ]
>| idn_type [ number ]   

//end