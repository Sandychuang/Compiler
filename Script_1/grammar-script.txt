//symbols
stmt_list stmt while_stmt if_stmt var_stmt assign_stmt io_stmt input_stmt print_stmt block
function_stmt return_stmt arg_list par_list
exp add_exp mul_exp pri_exp num_exp var_exp call_exp
bool_exp comp_exp and_exp or_exp 
lambda_exp

//tokens
if else while var function lambda return identifier number string = + - * / > < >= <= == != ! && || ( ) { } , e input print eof

//grammars 
stmt_list -> 
stmt_list stmt | stmt 

stmt ->
if_stmt | while_stmt |  function_stmt | var_stmt | assign_stmt | io_stmt | return_stmt | block | exp

if_stmt ->  
if ( bool_exp ) block else block | if ( bool_exp ) block

while_stmt -> 
while ( bool_exp ) block

function_stmt -> 
function identifier ( par_list ) block

var_stmt -> 
var identifier | var assign_stmt

assign_stmt -> 
identifier = exp

io_stmt -> 
print ( exp ) | input ( exp )

return_stmt -> 
return exp

block -> 
{ stmt_list }

par_list ->
par_list , identifier | identifier | e

arg_list -> 
arg_list , exp | exp | e

exp ->
bool_exp | lambda_exp

bool_exp -> 
bool_exp || or_exp | or_exp

or_exp ->
or_exp || and_exp | and_exp

and_exp ->
and_exp && comp_exp | comp_exp

comp_exp -> 
add_exp == add_exp | add_exp != add_exp | add_exp < add_exp | add_exp > add_exp | add_exp >= add_exp | add_exp <= add_exp | ! add_exp

add_exp -> 
add_exp + mul_exp | add_exp - mul_exp | mul_exp

mul_exp -> 
mul_exp * pri_exp | mul_exp / pri_exp | pri_exp

pri_exp -> 
call_exp | var_exp | num_exp | ( exp )

call_exp ->
identifier ( arg_list ) | lambda_exp ( arg_list )

var_exp -> 
identifier 

num_exp -> 
number 

lambda_exp -> 
lambda ( par_list ) { stmt_list } 

//end