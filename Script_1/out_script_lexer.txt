reserved :int
identifier :fb
oprator :(
reserved :int
identifier :a
oprator :)
oprator :{
note :// fibonacci function
reserved :if
oprator :(
identifier :a
oprator :<=
int_number :1
oprator :)
reserved :return
int_number :1
oprator :;
reserved :int
identifier :c
oprator :=
identifier :fb
oprator :(
identifier :a
oprator :-
int_number :1
oprator :)
oprator :+
identifier :fb
oprator :(
identifier :a
oprator :-
int_number :2
oprator :)
oprator :;
reserved :return
identifier :c
oprator :;
oprator :}
reserved :int
identifier :fact
oprator :(
reserved :int
identifier :b
oprator :)
oprator :{
note ://factorial function
reserved :if
oprator :(
identifier :b
oprator :<=
int_number :1
oprator :)
reserved :return
int_number :1
oprator :;
reserved :int
identifier :c
oprator :=
identifier :fact
oprator :(
identifier :b
oprator :-
int_number :1
oprator :)
oprator :*
identifier :b
oprator :;
reserved :return
identifier :c
oprator :;
oprator :}
reserved :int
identifier :a
oprator :;
identifier :a
oprator :=
int_number :5
oprator :;
reserved :int
identifier :c
oprator :=
identifier :fb
oprator :(
identifier :a
oprator :)
oprator :;
identifier :println
oprator :(
string :"fb("
oprator :+
identifier :a
oprator :+
string :")= "
oprator :+
identifier :c
oprator :)
oprator :;
reserved :int
identifier :d
oprator :=
identifier :fact
oprator :(
identifier :a
oprator :)
oprator :;
identifier :println
oprator :(
string :"fact("
oprator :+
identifier :a
oprator :+
string :")= "
oprator :+
identifier :d
oprator :)
oprator :;
eof: end of file!
