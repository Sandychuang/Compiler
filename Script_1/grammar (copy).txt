//symbols
Goal stmt_list stmt if_stmt while_stmt sg_stmt class_def func_def
var_def var_assign control_flow type_def expression left_side 
type_exp basic_type array_type idn_type lambda_type generic_type generic_args
scope_info_list scope_infos scope_info generic_pars_list generic_pars extends_list implements_list 
member_def_list
extends_types implements_types member_def field_def method_def
par_list parameters
if_stmt if_body else_body  
lambda_exp calc_exp cond_exp new_class_exp new_array_exp 
dim_list dim array_init_list array_init 
bool_exp or_exp and_exp cmp_exp add_exp mul_exp unary_exp  
cast_exp access_exp FieldAccess ArrayAccess 
pri_exp apply_exp arg_list arguments 

//tokens
if else while return break continue int double bool true false string char number var str chr function
class interface extends implements public private static type new final finally try catch 

finalize 
|| && ! > >= < <= == != + - ++ -- * / += -= *= /= = ? ->
e ( ) { } [ ] , . ; eof 

//grammars
Goal |>
   stmt_list

stmt_list |>
   stmt_list stmt
>| stmt

stmt |> 
   class_def
>| func_def
>| if_stmt
>| while_stmt
>| sg_stmt ;

sg_stmt |>
   var_assign
>| var_def
>| calc_exp
>| control_flow
>| type_def

control_flow |>
   return calc_exp
>| continue
>| break

var_def |>
   var_def , var
>| var_def , var = expression
>| type_exp var
>| type_exp var = expression

var_assign |>
   left_side = expression

left_side |>
   field_access
>| array_access
>| var


type_exp |>
   basic_type
>| array_type
>| idn_type
>| generic_type
>| function


basic_type |>
   int
>| double
>| bool
>| string
>| char


array_type |>
   array_type [ ]
>| basic_type [ ]
>| idn_type [ ]


idn_type |>
   idn_type . var
>| var


generic_type |>
   idn_type < generic_args >


generic_args |>
   generic_args , var
>| generic_args , ? extends idn_type
>| var
>| ? extends idn_type


class_def |>
   scope_info_list class var generic_pars_list extends_list implements_list  { 


member_def_list }
   
scope_info_list |>
   scope_infos
>| e



scope_infos |>
    scope_infos scope_info
>| scope_info


scope_info |>
   static
>| public
>| private
>| final


generic_pars_list |>
   < generic_pars >
>| e


generic_pars |>
   generic_pars , var
>| generic_pars , var extends idn_type
>| var
>| var extends idn_type


extends_list |>
   extens_types
>| e


extens_types |>
   extens_types idn_type
>| extends idn_type


implements_list |>
   implements_types
>| e


implements_types |>
   implements_types idn_type
>| implements idn_type


member_def_list |>
   member_def
>| e


member_def |>
   member_def field_def
>| member_def method_def
 
field_def |>
   scope_info_list var_def ;


method_def |>
   scope_info_list func_def


func_def |>
   generic_pars_list type_exp var ( par_list ) { stmt_list }


par_list |>
   parameters
>| e


parameters |>
   parameters , type_exp var
>| type_exp var


if_stmt |>
   if_body
>| if_body else else_body


if_body |>
   if ( bool_exp ) { stmt_list }
>| if ( bool_exp ) sg_stmt ;


else_body |>
   if_stmt
>| { stmt_list }
>| sg_stmt ;


while_stmt |>
   while ( bool_exp ) { stmt_list }



expression |>
   lambda_exp
>| calc_exp




calc_exp |> 
   cond_exp 
>| new_class_exp
>| new_array_exp


new_class_exp |>
   new idn_type ( arg_list )
>| new generic_type ( arg_list )


new_array_exp |>
   new idn_type dim_list
>| new basic_type dim_list
>| { array_init_list }


array_init_list |>
   array_init_list , array_init
>| array_init


array_init |>
   calc_exp
>| { arrayinit_list }

dim_list
   dim_list [  add_exp ]
>| [ add_exp ]



cond_exp |> 
   bool_exp

bool_exp |>
   bool_exp || or_exp
>|  or_exp


or_exp |>
   or_exp && and_exp
>| and_exp

and_exp |>
   cmp_exp



cmp_exp |> 
   add_exp > add_exp 
>| add_exp >= add_exp 
>| add_exp < add_exp 
>| add_exp <= add_exp 
>| add_exp == add_exp 
>| add_exp != add_exp 
>| ! add_exp
>| add_exp
>| true 
>| false 


add_exp |> 
   add_exp + mul_exp 
>| add_exp - mul_exp 
>| + mul_exp 
>| - mul_exp 
>| mul_exp 

mul_exp |> 
   mul_exp * pri_exp 
>| mul_exp / pri_exp 
>| unary_exp


unary_exp |>
   ++ access_exp
>| -- access_exp
>| access_exp ++ 
>| access_exp -- 
>| ! access_exp
>| access_exp
>| cast_exp



cast_exp |>
( type_exp ) access_exp

 
access_exp |>
   field_access
>| array_access
>| apply_exp
>| pri_exp

field_access |>
   field_access . var
>| field_acess . class
>| var
>| this
>| super



array_access |>
   field_acess dim_list

pri_exp |> 
   number 
>| str
>| chr
>| ( cond_exp ) 



apply_exp |> 
   access_exp . var ( arg_list ) 
>| apply_exp . var ( arg_list )
>| var ( arg_list ) 


arg_list |> 
   arguments
>| e 


arguments |>
   arg_list , calc_exp 
>| calc_exp 

 lambda_exp |>
   ( par_list ) -> { stmt_list }


//end